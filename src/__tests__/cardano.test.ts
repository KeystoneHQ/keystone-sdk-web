import { CryptoKeypath, PathComponent } from '@keystonehq/bc-ur-registry-cardano'
import KeystoneSDK, { type CardanoSignRequestProps, type CardanoSignature } from '../../src'
import { UR } from '../../src/types/ur'
import { toBuffer, uuid } from '../utils'

test('parseSignature', () => {
  const keystoneSDK = new KeystoneSDK()
  const type = 'cardano-signature'
  const cborHex = 'a201d825509b1deb4d3b7d4bad9bdd2b0d7b3dcb6d0258cda100828258207233f4cd5f24fa554e1ea4ed9251e39f4e18b2e0efd909b27ca01333c22ac49a5840725d8d98bab67eec8bf2704153f725f35ff7b0c9fabee135d97cf6c6b0885b14aa8748d9ba236abd19560b43afb0c5ac6d03359a1ef71b0712fc300d73e23e07825820c4af2472a9b27acad95967b1f5ff224cf3065824f6f1f0df7dbf4b52b819b1e85840c1ba75df625c7f657633f85f07d0bfd67f4e8ffb6b81b4b65a0ab186b459c4434971c25191b2725bff3f29bb9c1d247aabd60e63f0ea6ba53db0624ae1bcc101'
  const expectResult: CardanoSignature = {
    requestId: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',
    witnessSet: 'a100828258207233f4cd5f24fa554e1ea4ed9251e39f4e18b2e0efd909b27ca01333c22ac49a5840725d8d98bab67eec8bf2704153f725f35ff7b0c9fabee135d97cf6c6b0885b14aa8748d9ba236abd19560b43afb0c5ac6d03359a1ef71b0712fc300d73e23e07825820c4af2472a9b27acad95967b1f5ff224cf3065824f6f1f0df7dbf4b52b819b1e85840c1ba75df625c7f657633f85f07d0bfd67f4e8ffb6b81b4b65a0ab186b459c4434971c25191b2725bff3f29bb9c1d247aabd60e63f0ea6ba53db0624ae1bcc101'
  }
  expect(keystoneSDK.cardano.parseSignature(new UR(toBuffer(cborHex), type))).toStrictEqual(expectResult)
})

test('generateSignRequest', () => {
  const keystoneSDK = new KeystoneSDK()
  const signRequest: CardanoSignRequestProps = {
    signData: Buffer.from('84a400828258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99038258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99040182a200581d6179df4c75f7616d7d1fd39cbc1a6ea6b40a0d7b89fea62fc0909b6c370119c350a200581d61c9b0c9761fd1dc0404abd55efc895026628b5035ac623c614fbad0310119c35002198ecb0300a0f5f6', 'hex'),
    utxos: [
      {
        transactionHash:
          '4e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99',
        index: 3,
        amount: '10000000',
        xfp: '73c5da0a',
        hdPath: "m/1852'/1815'/0'/0/0",
        address:
          'addr1qy8ac7qqy0vtulyl7wntmsxc6wex80gvcyjy33qffrhm7sh927ysx5sftuw0dlft05dz3c7revpf7jx0xnlcjz3g69mq4afdhv'
      },
      {
        transactionHash:
          '4e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99',
        index: 4,
        amount: '18020000',
        xfp: '73c5da0a',
        hdPath: "m/1852'/1815'/0'/0/1",
        address:
          'addr1qyz85693g4fr8c55mfyxhae8j2u04pydxrgqr73vmwpx3azv4dgkyrgylj5yl2m0jlpdpeswyyzjs0vhwvnl6xg9f7ssrxkz90'
      }
    ],
    extraSigners: [
      {
        keyHash: 'e557890352095f1cf6fd2b7d1a28e3c3cb029f48cf34ff890a28d176',
        xfp: '73c5da0a',
        keyPath: "m/1852'/1815'/0'/2/0"
      }
    ],
    requestId: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',
    origin: 'cardano-wallet'
  }

  const type = 'cardano-sign-request'
  const cborHex = 'a501d825509b1deb4d3b7d4bad9bdd2b0d7b3dcb6d0258a184a400828258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99038258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99040182a200581d6179df4c75f7616d7d1fd39cbc1a6ea6b40a0d7b89fea62fc0909b6c370119c350a200581d61c9b0c9761fd1dc0404abd55efc895026628b5035ac623c614fbad0310119c35002198ecb0300a0f5f60382d90899a50158204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c9902030368313030303030303004d90130a2018a19073cf5190717f500f500f400f4021a73c5da0a0578676164647231717938616337717179307674756c796c37776e746d737863367765783830677663796a79333371666672686d37736839323779737835736674757730646c66743035647a3363377265767066376a7830786e6c636a7a336736396d71346166646876d90899a50158204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c9902040368313830323030303004d90130a2018a19073cf5190717f500f500f401f4021a73c5da0a057867616464723171797a383536393367346672386335356d667978686165386a3275303470796478726771723733766d77707833617a763464676b797267796c6a35796c326d306a6c70647065737779797a6a7330766877766e6c367867396637737372786b7a39300481d9089ca201581ce557890352095f1cf6fd2b7d1a28e3c3cb029f48cf34ff890a28d17602d90130a2018a19073cf5190717f500f502f400f4021a73c5da0a056e63617264616e6f2d77616c6c6574'
  const expectResult = new UR(toBuffer(cborHex), type)
  expect(keystoneSDK.cardano.generateSignRequest(signRequest)).toStrictEqual(expectResult)
})

test("test should generate cardano-sign-tx-hash-request", async () => {
  const txHash =
      "52a1f5596f31358030f0d9d3a2db2b119b8f766386071684d26d0d37439c144e";
  const signKeyPath1 = new CryptoKeypath(
    [
      new PathComponent({ index: 1852, hardened: true }),
      new PathComponent({ index: 1815, hardened: true }),
      new PathComponent({ index: 0, hardened: true }),
      new PathComponent({ index: 0, hardened: false }),
      new PathComponent({ index: 0, hardened: false }),
    ],
    Buffer.from("1250b6bc", "hex")
  );

  const signKeyPath2 = new CryptoKeypath(
    [
      new PathComponent({ index: 1852, hardened: true }),
      new PathComponent({ index: 1815, hardened: true }),
      new PathComponent({ index: 0, hardened: true }),
      new PathComponent({ index: 2, hardened: false }),
      new PathComponent({ index: 0, hardened: false }),
    ],
    Buffer.from("1250b6bc", "hex")
  );
  const addressList = [
    "addr1qy8ac7qqy0vtulyl7wntmsxc6wex80gvcyjy33qffrhm7sh927ysx5sftuw0dlft05dz3c7revpf7jx0xnlcjz3g69mq4afdhv",
    "addr1qyz85693g4fr8c55mfyxhae8j2u04pydxrgqr73vmwpx3azv4dgkyrgylj5yl2m0jlpdpeswyyzjs0vhwvnl6xg9f7ssrxkz90"
  ]
  const requestId = uuid.stringify(
    Buffer.from("52090a1c29394842a9adba0bc021a58b", "hex")
  );
  const origin = "eternl"
  const keystoneSDK = await KeystoneSDK.create()
  const cborHex = keystoneSDK.cardano.generateSignTxHashRequest(txHash, [signKeyPath1, signKeyPath2], addressList, origin, requestId).cbor.toString("hex");
  expect(cborHex).toBe(
    "a501d8255052090a1c29394842a9adba0bc021a58b027840353261316635353936663331333538303330663064396433613264623262313139623866373636333836303731363834643236643064333734333963313434650382d90130a2018a19073cf5190717f500f500f400f4021a1250b6bcd90130a2018a19073cf5190717f500f502f400f4021a1250b6bc0466657465726e6c058278676164647231717938616337717179307674756c796c37776e746d737863367765783830677663796a79333371666672686d37736839323779737835736674757730646c66743035647a3363377265767066376a7830786e6c636a7a336736396d713461666468767867616464723171797a383536393367346672386335356d667978686165386a3275303470796478726771723733766d77707833617a763464676b797267796c6a35796c326d306a6c70647065737779797a6a7330766877766e6c367867396637737372786b7a3930"
  );
  const type = 'cardano-sign-tx-hash-request'
  const expectResult = new UR(toBuffer(cborHex), type)
  const ur = keystoneSDK.cardano.generateSignTxHashRequest(txHash, [signKeyPath1, signKeyPath2], addressList, origin, requestId);
  expect(ur).toStrictEqual(expectResult)
});

test('checkNeedSignTxHash', () => {
  const keystoneSDK = new KeystoneSDK()
  const signData = Buffer.from('84a400828258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99038258204e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99040182a200581d6179df4c75f7616d7d1fd39cbc1a6ea6b40a0d7b89fea62fc0909b6c370119c350a200581d61c9b0c9761fd1dc0404abd55efc895026628b5035ac623c614fbad0310119c35002198ecb0300a0f5f6', 'hex')
  expect(signData.length).toBe(161)
  expect(keystoneSDK.cardano.checkNeedSignTxHash(signData)).toBe(false)
})

test("should convert sign tx hash request to sign request", () => {
  let signData = "84a500983f8258200555234e723a912175d699b8ffa7ba2c1043e4528bef672bed8da241fd21072c008258200c8d79dc4d45107437ff62d36e717d08c7d81f3c80eba3d3030177bbec415983008258200e37f3d2d9f517cb6ef7d8b4e70eb7d24c29cbe86bc805a000b9812e794a7a210082582012b456cc9726621169d3f511ddbfa688929003b3921bbd1cf2bf63c58189e20f0082582018976f084414c4fb396dcf18eb7e138b5d66337755a3f631cf4fda194188c69d038258201bd6348540b92526ca122a0065adc73e67ed6404274e0e2373c5981fc534d8df008258201bed2455a33314affd3e0ef8dea8fda75f000b2ebeaaaaf4ca33ef5cc4484b40018258201eb27c6be4a1127344775a196ac6c05c194d7ced38a915306f9f568c49b0659e008258202db66c8c2aeadf5ca5743e6513ecb8dd565b580b5c8c7c167509429941d7a2a0008258202f422a1de09a84a84dc386b8804e29719b71d386f79a023f7ee579ab903b2ed8008258202f50c189a5ad7c9d65586ac50113184984835f4f2eec2bcab4e3d9f9bb30f2d8008258203285aafc1d921dc76305f5679811d107ccea54cde6dc0870db3da85cd9468cf7008258203d6be4d8ccd2f40c2d41a7953763c9d2857967e2fcb56f0f6522789ec2f9e9b5008258204665f78981c6934dd9c2a9f301c00b20b1e980507a2f516595d7656335b0bc24008258204aa5a2d5d387f1ac95456baefdf3bab3f4ef877e7062aca4b4d43bf6841c4a48038258204aa5a2d5d387f1ac95456baefdf3bab3f4ef877e7062aca4b4d43bf6841c4a48048258204f512c338719cb05b74dd41c7b06e3ca213d46fc214c96ecc26b67feb43ef6b40082582052cac6b14bc70356635300c7c0b124541acdedc9d34045c18903c446e32d4bca0082582056bab3b5fe365dc96e42d3825a7043551ca043499b665241b898522ecfd9f329008258205bf86bd5a4f52156a4523e46f3f983856054c32d877c0ab6828934da623dfa51008258206165fc6c8dd93a6447b5878f50878412ca7e306ecdd5c90dedaff8c7bde6362e008258206dde9e7c5cdca6485a6a6ee204892dbd31cc62a089ce5aa423c2db3d723b4113008258206e434a6566f0c613fd09db2d15673bb79428e09f38be92b1b561afd92b3edc250082582070c0eddde60a3436994e039fcfada96bb226360890a13bdb7f60c530b311cd78008258207177f55919b57d064f28567c0d67406ad2e70df4e845e36113201ffb848c79be0082582074a0a49106d50d3ba9632c260227c18d97ae2784a69e1a95c2f3a4f2ff7207f5008258207d47ab26649f61b0afc85f6c9377a18ddf1696f2cf70f957cd381928f563a417008258207f246805b4d8348ac89bbf4d83b9a17853f3010ad0ac6c731c3dfb1f89ce5842008258207f2cab0c1c6c4fc82d376269c7e6fd161b85ec9a543e5130782a03c6001dbb56008258208116c6ed856733b110ce9e47ef491474165a2e7df5391a6b5bc2b3a52e21fc6f0082582081364c4f5ede086514c8b37c72e46a48d77d50fc248f901bb7ae60ac38025c8900825820834b437bb81df2f8a74b3b8a7ef6106bae7f4531c7ba3650ccf616d0d24c9fba00825820876734aa441ab2f3bf77c33e78a8d1ac371d4568d302a23e8ef0ba1f2438524a008258208f795d5efcdeb681844985f88d2c9cb049468b806bf5942315a450fe3857e9d600825820939d026a08b4362eb029a45a2d9457b58acaad749672f4def3126dd5cac98a5201825820a0b16dd206a8e7613c110f1d04d34e919e03fde3f51eabb225d5eaef5001f8cd00825820a24fefbaed573c31bace25001982087d37376e9742c1931d85f71c2001dbb3fb03825820a24fefbaed573c31bace25001982087d37376e9742c1931d85f71c2001dbb3fb04825820a35318cf61846850b4725009fe40e1172ef9a2993a135d32d9ebe54de9bf360500825820a6717c15b57a4279318ff30441c20c26dcbbbcc27c8861bffe27249203d6fc8801825820a6717c15b57a4279318ff30441c20c26dcbbbcc27c8861bffe27249203d6fc8803825820a8dac6a8a112ee0bdfb86bb38dd7b669ba02548f9f6aafa23e48b445c5152f6e00825820ad417e886eac0733d189fec27fe91ef0e006d2185b7e4cc97a064ddeabc7e06f00825820ae7909c336ede4eea2c01f34863715ad33ede183d66c1349e569b22b641b791500825820b00dbfbfc8b18fe57020ce7444584bf9ea5d462830c745168a3dcf22e080515b00825820b61f0a3c03c29f37c4e6b32c3be880a9e545dc35d90a52537e5b035274580c4403825820bb4ba516009cbdda0526a7f766be44841f7810c832ced231fa967eb5e5d0c84b00825820c30c702177054bad9798f68a0f3473fa14e424c1480e7dc73c87b069ab3d32c600825820c8d001f12b72abca40809e4cf042661411029831676edf2e048e2fe31d7ccd5300825820c98874e970a9ff2a3691acd3efeffd7118ca739cb5af7269b6e3e98c874e3e1200825820cc15ed7becf78a33cadb9a5451193591e9b3f7b261d8add61435eaffb16292ca00825820d26f2e2c1524fef7e6508c765e9f1cd0fc5051217afecfb80d5a406d941050c900825820d2f08984016c72a27f15c46187b7a30b91a7ac092a1193bfcc65c13c76f88e0400825820db02ddeffc97a6b95abc3a709b9d4af56bfae817856a9403f6d9c5b02977111400825820df583c5a7b236aa435453d651f0562f107c3b4ef4bec2e3200dc3226bb7b55cd00825820e18890a4a5d48f126f8678d7c4be2fc9c899f340260600b7ff6b5ab5d25d662503825820ea56889157f8e49c3c802b9a9be3ff5bbb73bfa9aeed68da709f2d1edb7f510300825820ec39b81ffb2e80ca64ba106b24503028b6ac881be919a402e9c9893144009b5a02825820ec4e88d88b1b41404a8fa79bec098b701010ee26a673585cea3845d083421e4d00825820ef26ac913fcbb31863eead5c4b68d48ad061bd8e63cc21156586ca540858c0d300825820f3302ed27bbefb3a9ef0df1ab1213c58310d7874f20a45a393ccc6770172182500825820f5d743d58e9094dd9f8642ae274ece2c810964e1cfb59f1ee376d9e076d80c4d03825820fddee38516b2ea61dae033e33f513366548296f04885a36ebb443ba98eadd52600018282583901823d93f3eca62caf563b3a5b31edd8b955ca3a3b92af6bbf20a02421a436cb015ee712e344a2c671d62f72000ff8749b4ab51bf2e9f1682b821a050744beb81b581c0c78f619e54a5d00e143f66181a2c500d0c394b38a10e86cd1a23c5fa1444144415817581c15509d4cb60f066ca4c7e982d764d6ceb4324cb33776d1711da1beeea14e42616279416c69656e303135323901581c1d7f33bd23d85e1a25d87d86fac4f199c3197a2f7afeb662a0f34e1ea150776f726c646d6f62696c65746f6b656e1a00bdc43c581c279c909f348e533da5808898f87f9a14bb2c3dfbbacccd631d927a3fa144534e454b19015c581c29d222ce763455e3d7a09a665ce554f00ac89d2e99a1a83d267170c6a1434d494e1a0021358e581c420000029ad9527271b1b1e3c27ee065c18df70a4a4cfc3093a41a44a14341584f1a565d1abb581c51a5e236c4de3af2b8020442e2a26f454fda3b04cb621c1294a0ef34a144424f4f4b1a041cdb40581c533bb94a8850ee3ccbe483106489399112b74c905342cb1792a797a0a144494e44591a00377e57581c5b01968867e13432afaa2f814e1d15e332d6cd0aa77e350972b0967da1534144414f476f7665726e616e6365546f6b656e19010e581c5d16cc1a177b5d9ba9cfa9793b07e60f1fb70fea1f8aef064415d114a1434941471a00193aaf581c5dac8536653edc12f6f5e1045d8164b9f59998d3bdc300fc92843489a1444e4d4b521aa8672a10581c8638ffe012ad4463aa87d1e92ca52ec7cd42fa1a6e7b1d73b95d3aada14e426162794d6f6e6b65793030313901581c95a427e384527065f2f8946f5e86320d0117839a5e98ea2c0b55fb00a14448554e541a01947898581c961f2cac0bb1967d74691af179350c1e1062c7298d1f7be1e4696e31a1452444455250182b581ca0028f350aaabe0545fdcb56b039bfb08e4bb4d8c4d7c3c7d481c235a145484f534b591a04277dc9581ca3931691f5c4e65d01c429e473d0dd24c51afdb6daf88e632a6c1e51a14b6f7263666178746f6b656e1a028ce9ea581cb024c9cbca03eb9ab49330b69ecd18a7619fcf39f3c34bd783ea360fa24e43464a4232303032483030373139014e43464a423230303248303836313401581cc48cbb3d5e57ed56e276bc45f99ab39abe94e6cd7ac39fb402da47ada1480014df105553444d1a001a8c97581cc7e0049200851adec2cb4d9abf2e9a57e24bf1389181dc536c5bfc89a14e526172697479446177673139373801581cc881c20e49dbaca3ff6cef365969354150983230c39520b917f5cf7ca1444e696b651836581cd2442fa6d08c72811d4bccdb36d0cb35cb28f4db4c5793ef00aff5f1a149244652414354414c531b00000029e8d6086d581cdda5fdb1002f7389b33e036b6afee82a8189becb6cba852e8b79b4fba1480014df1047454e531a006776aa581ce5a42a1a1d3d1da71b0449663c32798725888d2eb0843c4dabeca05aa151576f726c644d6f62696c65546f6b656e581a000f4240581cf5808c2c990d86da54bfc97d89cee6efa20cd8461616359478d96b4ca158207b12f25ce8d6f424e1edbc8b61f0742fb13252605f31dc40373d6a245e8ec1d11a000c9a8b581cf66d78b4a3cb3d37afa0ec36461e51ecbde00f26c8f0a68f94b69880a144694554481864581cfbae99b8679369079a7f6f0da14a2cf1c2d6bfd3afdf3a96a64ab67aa1490014df1047454e53581a09340aef581cfc11a9ef431f81b837736be5f53e4da29b9469c983d07f321262ce61a1444652454e19271082583901f2cdd6dac06645ddb673a57dfb34959b30df09e72ef75ccae7b52093d4f374141343775acb650f3bf66da69bc586e5021642abc46574049c1a000f00b7021a00052a21031a088d45f50800a0f5f6";
  const signDataBuffer = Buffer.from(signData,"hex")
  expect(signDataBuffer.length).toBe(3650)
  let keystoneSDK = new KeystoneSDK()
  expect(keystoneSDK.cardano.checkNeedSignTxHash(signDataBuffer)).toBe(true)
  // generate tx hash
  const txHash = keystoneSDK.cardano.generateTxHash(signDataBuffer)
  expect(txHash).toBe("c32951717986719f49bf937867fd3f9e6a4ac2ea1084e6a5a77b7da60d47e21a")
})

