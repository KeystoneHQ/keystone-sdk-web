import KeystoneSDK from '../../src'
import { KeystoneCosmosSDK } from '../chains'
import { type CosmosSignature } from '../types'
import { UR } from '../../src/types/ur'
import { toBuffer } from '../utils'

test('parseSignature', () => {
  const keystoneSDK = new KeystoneSDK()

  const type = 'cosmos-signature'
  const cborHex = 'a301d825507afd5e09926743fba02e08c4a09417ec02584078325c2ea8d1841dbcd962e894ca6ecd5890aa4c1aa9e1eb789cd2d0e9c22ec737c2b4fb9c2defd863cadf914f538330ec42d6c30c04857ee1f06e7f2589d7d903582103f3ded94f2969d76200c6ed5db836041cc815fa62aa791e047905186c07e00275'
  const expectResult: CosmosSignature = {
    signature: '78325c2ea8d1841dbcd962e894ca6ecd5890aa4c1aa9e1eb789cd2d0e9c22ec737c2b4fb9c2defd863cadf914f538330ec42d6c30c04857ee1f06e7f2589d7d9',
    requestId: '7afd5e09-9267-43fb-a02e-08c4a09417ec',
    publicKey: '03f3ded94f2969d76200c6ed5db836041cc815fa62aa791e047905186c07e00275'
  }

  expect(keystoneSDK.cosmos.parseSignature(new UR(toBuffer(cborHex), type))).toStrictEqual(expectResult)
})

test('generateSignRequest', () => {
  const keystoneSDK = new KeystoneSDK({
    origin: 'Keplr'
  })

  const requestId = '7AFD5E09-9267-43FB-A02E-08C4A09417EC'
  const signData
  const accounts = [{
    path: "m/44'/118'/0'/0/0",
    xfp: 'f23f9fd2',
    address: '4c2a59190413dff36aba8e6ac130c7a691cfb79f'
  }]
  const dataType = KeystoneCosmosSDK.DataType.amino

  const type = 'cosmos-sign-request'
  const cborHex = 'a601d825507afd5e09926743fba02e08c4a09417ec0259016b7b226163636f756e745f6e756d626572223a22323930353536222c22636861696e5f6964223a226f736d6f2d746573742d34222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303032222c2264656e6f6d223a22756f736d6f227d5d2c22676173223a22313030313936227d2c226d656d6f223a22222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d736753656e64222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223132303030303030222c2264656e6f6d223a22756f736d6f227d5d2c2266726f6d5f61646472657373223a226f736d6f31667334396a7867797a30306c78363436336534767a767838353667756c64756c6a7a6174366d222c22746f5f61646472657373223a226f736d6f31667334396a7867797a30306c78363436336534767a767838353667756c64756c6a7a6174366d227d7d5d2c2273657175656e6365223a2230227d03010481d90130a2018a182cf51876f500f500f400f4021af23f9fd2058178283463326135393139303431336466663336616261386536616331333063376136393163666237396606654b65706c72'
  const expectResult = new UR(toBuffer(cborHex), type)

  expect(keystoneSDK.cosmos.generateSignRequest({ requestId, signData, dataType, accounts })).toStrictEqual(expectResult)
})
