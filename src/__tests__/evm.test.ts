import KeystoneSDK from '../../src'
import { KeystoneEvmSDK } from '../chains'
import { type Signature } from '../types'
import { UR } from '../../src/types/ur'
import { toBuffer } from '../utils'

test('parseSignature', () => {
  const keystoneSDK = new KeystoneSDK()

  const type = 'evm-signature'
  const cborHex = 'a201d82550057523355d514a64a481ff2200000000025840a0e2577ca16119a32f421c6a1c90fa2178a9382f30bf3575ff276fb820b32b3269d49d6bbfc82bae899f60c15de4b97f24a7ebb6d4712534829628ccfbef38bc'
  const expectResult: Signature = {
    signature: 'a0e2577ca16119a32f421c6a1c90fa2178a9382f30bf3575ff276fb820b32b3269d49d6bbfc82bae899f60c15de4b97f24a7ebb6d4712534829628ccfbef38bc',
    requestId: '05752335-5d51-4a64-a481-ff2200000000'
  }

  expect(keystoneSDK.evm.parseSignature(new UR(toBuffer(cborHex), type))).toStrictEqual(expectResult)
})

test('generateSignRequest', () => {
  const keystoneSDK = new KeystoneSDK({
    origin: 'Keplr Extension'
  })

  const requestId = '05752335-5d51-4a64-a481-ff2200000000'
  const signData = '0A9D010A9A010A1C2F636F736D6F732E62616E6B2E763162657461312E4D736753656E64127A0A2C65766D6F73317363397975617230756E3736677235633871346A3736687572347179706A6B38336E786B7735122C65766D6F73317363397975617230756E3736677235633871346A3736687572347179706A6B38336E786B77351A1C0A07617465766D6F7312113130303030303030303030303030303030127E0A590A4F0A282F65746865726D696E742E63727970746F2E76312E657468736563703235366B312E5075624B657912230A21024F7A8D64E515CCF1E0A92A7C859262F425473CF09A50EBCAF3B06B156624145312040A020801181612210A1B0A07617465766D6F7312103236323530303030303030303030303010A8B4061A0C65766D6F735F393030302D342084C68E01'
  const account = {
    path: "m/44'/60'/0'/0/0",
    xfp: 'f23f9fd2',
    address: '0x860A4E746FE4FDA40E98382B2F6AFC1D4040CAC7'
  }
  const dataType = KeystoneEvmSDK.DataType.cosmosDirect
  const customChainIdentifier = 9000

  const type = 'evm-sign-request'
  const cborHex = 'a701d82550057523355d514a64a481ff2200000000025901330a9d010a9a010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e64127a0a2c65766d6f73317363397975617230756e3736677235633871346a3736687572347179706a6b38336e786b7735122c65766d6f73317363397975617230756e3736677235633871346a3736687572347179706a6b38336e786b77351a1c0a07617465766d6f7312113130303030303030303030303030303030127e0a590a4f0a282f65746865726d696e742e63727970746f2e76312e657468736563703235366b312e5075624b657912230a21024f7a8d64e515ccf1e0a92a7c859262f425473cf09a50ebcaf3b06b156624145312040a020801181612210a1b0a07617465766d6f7312103236323530303030303030303030303010a8b4061a0c65766d6f735f393030302d342084c68e0103030419232805d90130a2018a182cf5183cf500f500f400f4021af23f9fd20654860a4e746fe4fda40e98382b2f6afc1d4040cac7076f4b65706c7220457874656e73696f6e'
  const expectResult = new UR(toBuffer(cborHex), type)

  expect(keystoneSDK.evm.generateSignRequest({ requestId, signData, dataType, customChainIdentifier, account })).toStrictEqual(expectResult)
})
