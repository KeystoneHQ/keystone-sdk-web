import KeystoneSDK from '../../src'
import { type SuiSignature } from '../types'
import { UR } from '../../src/types/ur'
import { toBuffer } from '../utils'

test('parseSignature', () => {
  const keystoneSDK = new KeystoneSDK()

  const type = 'sui-signature'
  const cborHex = 'A301D825509B1DEB4D3B7D4BAD9BDD2B0D7B3DCB6D025840B93921DB17F2F1D50BDA37B510F543151DF222E80946FEFBACFADFB2D4A79FDA4FACF0AE5B41D71EA3A7EBEA6AA88DE9577A788AEAB195B99B6A633C20E055030358207BAC671050FCBA0DD54F3930601C42AD36CC11BC0589ED8D3CEF3EFF1C49EF6E'
  const expectResult: SuiSignature = {
    signature: 'b93921db17f2f1d50bda37b510f543151df222e80946fefbacfadfb2d4a79fda4facf0ae5b41d71ea3a7ebea6aa88de9577a788aeab195b99b6a633c20e05503',
    requestId: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d',
    publicKey: '7bac671050fcba0dd54f3930601c42ad36cc11bc0589ed8d3cef3eff1c49ef6e'
  }

  expect(keystoneSDK.sui.parseSignature(new UR(toBuffer(cborHex), type))).toStrictEqual(expectResult)
})

test('generateSignRequest', () => {
  const keystoneSDK = new KeystoneSDK()

  const requestId = '7AFD5E09-9267-43FB-A02E-08C4A09417EC'
  const intentMessage = '000000000002002086ac6179ca6ad9a7b1ccb47202d06ae09a131e66309944922af9c73d3c203b66000810270000000000000202000101010001010200000100000e4d9313fb5b3f166bb6f2aea587edbe21fb1c094472ccd002f34b9d0633c71901d833a8eabc697a0b2e23740aca7be9b0b9e1560a39d2f390cf2534e94429f91ced0c00000000000020190ca0d64215ac63f50dbffa47563404182304e0c10ea30b5e4d671b7173a34c0e4d9313fb5b3f166bb6f2aea587edbe21fb1c094472ccd002f34b9d0633c719e803000000000000640000000000000000'
  const accounts = [
    {
      path: "m/44'/784'/0'/0'/0'",
      xfp: 'C9A8ED4A',
      address: 'a698c879862b9b965a73bedfa83469d94e276f3ee7b99367331d8b340c17d196'
    },
    {
      path: "m/44'/784'/0'/0'/1'",
      xfp: 'C9A8ED4A',
      address: '68a42711caf03f82e5e45452eb4f1223675aeed4a80b4465892495c48648e3c7'
    }
  ]
  const origin = 'Sui Wallet'

  const type = 'sui-sign-request'
  const cborHex = 'a501d825507afd5e09926743fba02e08c4a09417ec0258dc000000000002002086ac6179ca6ad9a7b1ccb47202d06ae09a131e66309944922af9c73d3c203b66000810270000000000000202000101010001010200000100000e4d9313fb5b3f166bb6f2aea587edbe21fb1c094472ccd002f34b9d0633c71901d833a8eabc697a0b2e23740aca7be9b0b9e1560a39d2f390cf2534e94429f91ced0c00000000000020190ca0d64215ac63f50dbffa47563404182304e0c10ea30b5e4d671b7173a34c0e4d9313fb5b3f166bb6f2aea587edbe21fb1c094472ccd002f34b9d0633c719e8030000000000006400000000000000000382d90130a2018a182cf5190310f500f500f500f5021ac9a8ed4ad90130a2018a182cf5190310f500f500f501f5021ac9a8ed4a04825820a698c879862b9b965a73bedfa83469d94e276f3ee7b99367331d8b340c17d196582068a42711caf03f82e5e45452eb4f1223675aeed4a80b4465892495c48648e3c7056a5375692057616c6c6574'
  const expectResult = new UR(toBuffer(cborHex), type)

  expect(keystoneSDK.sui.generateSignRequest({ requestId, intentMessage, accounts, origin })).toStrictEqual(expectResult)
})

test('generateSignHashRequest', async () => {
  const keystoneSDK = new KeystoneSDK()
  const requestId = '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
  const messageHash = 'ce035bd8ab6499dcaa01d623aa7c977ec9be13798046ca1f86c9f3ebcd2f4d13'
  const messageBuffer = toBuffer(messageHash)
  expect(messageBuffer.length === 32).toBe(true)
  const accounts = [
    {
      path: "m/44'/784'/0'/0'/0'",
      xfp: '52744703',
      address: '504886c9ec43bff70af37f55865094cc3a799cb54479f252d30cd3717f15ecdc'
    }
  ]
  const origin = 'Suiet'
  const cborHex = "a501d825509b1deb4d3b7d4bad9bdd2b0d7b3dcb6d027840636530333562643861623634393964636161303164363233616137633937376563396265313337393830343663613166383663396633656263643266346431330381d90130a2018a182cf5190310f500f500f500f5021a5274470304815820504886c9ec43bff70af37f55865094cc3a799cb54479f252d30cd3717f15ecdc05655375696574";
  let expectResult = new UR(toBuffer(cborHex), 'sui-sign-hash-request')
  let result = keystoneSDK.sui.generateSignHashRequest({ requestId, messageHash, accounts, origin })
  expect(result).toStrictEqual(expectResult)
})


test('shoud generate a sign hash request when intentMessage is longer than 2048 bytes', async () => {
  const keystoneSDK = await KeystoneSDK.create();
  const requestId = '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
  const intentMessage = '00000000000e0101aeab97f96cf9877fee2883315d459552b2b921edc16d7ceac6eab944dd88919c40000000000000000000ba07b80701000000040d00310f0484060b353f6b1c93fed2616c527acf6f3d5cc62d1f302267cd61d065a859795afb84fde7f538628b4dfbe1d875a5bbefae4dfc739bd4207c3e70b4af2800029614746e310697af3e16f4e761ff8e6ec0f9442694a10af5dfa4dc82629326e1777ca282f550987b59e51c039264c9a582190aa19fb80140f2cb367e3e0c9ff401044b824ff64104f5604860007fa4767bdfb500078c1911295e749e8022a7a882d20bdee158567c8efee40debef13f4ddcc6f9234001f408d6a84ebddc0dc4789f6000665894b2ea9a474f81dce7518f5166356831474da6d2b22bee09c46701d141881760c8a5b99da238d237201e49972bec92e0ebb76e25021f2485373467a176d6901089944051cf16230d38cb72f4c5c645b4a3bc23b68f0c889850d9bd972c7aa6b5a24c1bfc489fc9965b8a0851506647abf9ffcceb35326db75c901810090ad254e010a52e4fb4c0f955c98f93a509ebce4563ac7b6411bf089df4c07e8de5df442917d0f459f201b9d5945357651b0e6d8bc13d5e45a9d1c69c1b9b908f1e8162afb31010bb30b59c26888f46acd9775e3e52d57cab63c5f65d738b3fe874eab0ab114b8034b3ceb9ee6cf985aa3f2907dd6a3160e36e7c321ef33b4fa2e5677f7c4229594000c2fe723e687b6cfc2c52498d0ecf5e78705f9a3b87f80e88dea36008529cd0955068787c7b3974cfdc4a7b94b673986ab63d4d63b7b9c12c2503b6ce3f927044b010d3bc4619068abcd541e7e4d1ba9805545dd70c4a61f3b10542487903b23d6d0753d06f77558f3e90bd304f72ae0a765e677cc84cb027854532c5477d297128eda000e661328809e4e67c2fcbcc7b86dc2d7c3c3c565108d93270b59b443918364527f422cc3d85b369a5029b3bdf65e1d70ca3da444aa3ca6b1129829555dd1102fcb000f8b5b699dc8fc54bc32a0e7012db1760f01a76a4b2be180c411c2fbf42e6b697f139ba2d8920c834d2d7060eca0b3d10d97c1bf10f05c450589aa7744e3cab7c801110d453bdaaafea926804c269f92795f24eeacdbaa6e544d93c17ad2aee4208a1552350cc7c06a2fdc9f58afd6a51dbb92e4752074281ad8ff3052a05c6b02d157001259cb575a4dc15188197cc35fba5dc9c66351e811fa51d9bf812f5d1df7123d6641d3242c0395ed716273e644072c4e7c9f321ed916cd72c34492185302b69134016705e13200000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa71000000000517d998014155575600000000000a23b6b5000027106cad37e6dc98915b8d49a9ce7263862754ffbba60101000000000000000000000000000000000000000000000000000000000000000601000000000000000001011f9310238ee9298fb703c3419030b35b22bb1cc37113e3bb5007c99aec79e5b886640c01000000000000e509e309504e41550100000003b801000000040d00310f0484060b353f6b1c93fed2616c527acf6f3d5cc62d1f302267cd61d065a859795afb84fde7f538628b4dfbe1d875a5bbefae4dfc739bd4207c3e70b4af2800029614746e310697af3e16f4e761ff8e6ec0f9442694a10af5dfa4dc82629326e1777ca282f550987b59e51c039264c9a582190aa19fb80140f2cb367e3e0c9ff401044b824ff64104f5604860007fa4767bdfb500078c1911295e749e8022a7a882d20bdee158567c8efee40debef13f4ddcc6f9234001f408d6a84ebddc0dc4789f6000665894b2ea9a474f81dce7518f5166356831474da6d2b22bee09c46701d141881760c8a5b99da238d237201e49972bec92e0ebb76e25021f2485373467a176d6901089944051cf16230d38cb72f4c5c645b4a3bc23b68f0c889850d9bd972c7aa6b5a24c1bfc489fc9965b8a0851506647abf9ffcceb35326db75c901810090ad254e010a52e4fb4c0f955c98f93a509ebce4563ac7b6411bf089df4c07e8de5df442917d0f459f201b9d5945357651b0e6d8bc13d5e45a9d1c69c1b9b908f1e8162afb31010bb30b59c26888f46acd9775e3e52d57cab63c5f65d738b3fe874eab0ab114b8034b3ceb9ee6cf985aa3f2907dd6a3160e36e7c321ef33b4fa2e5677f7c4229594000c2fe723e687b6cfc2c52498d0ecf5e78705f9a3b87f80e88dea36008529cd0955068787c7b3974cfdc4a7b94b673986ab63d4d63b7b9c12c2503b6ce3f927044b010d3bc4619068abcd541e7e4d1ba9805545dd70c4a61f3b10542487903b23d6d0753d06f77558f3e90bd304f72ae0a765e677cc84cb027854532c5477d297128eda000e661328809e4e67c2fcbcc7b86dc2d7c3c3c565108d93270b59b443918364527f422cc3d85b369a5029b3bdf65e1d70ca3da444aa3ca6b1129829555dd1102fcb000f8b5b699dc8fc54bc32a0e7012db1760f01a76a4b2be180c411c2fbf42e6b697f139ba2d8920c834d2d7060eca0b3d10d97c1bf10f05c450589aa7744e3cab7c801110d453bdaaafea926804c269f92795f24eeacdbaa6e544d93c17ad2aee4208a1552350cc7c06a2fdc9f58afd6a51dbb92e4752074281ad8ff3052a05c6b02d157001259cb575a4dc15188197cc35fba5dc9c66351e811fa51d9bf812f5d1df7123d6641d3242c0395ed716273e644072c4e7c9f321ed916cd72c34492185302b69134016705e13200000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa71000000000517d998014155575600000000000a23b6b5000027106cad37e6dc98915b8d49a9ce7263862754ffbba60100550023d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744000000000bb33737000000000003c024fffffff8000000006705e132000000006705e132000000000bc8882c00000000000365ed0a6fb5256469f21f0383b20b297032cb81ef1082fcdc8b8d0bcde27c98028b77078a43d14384f643a4fe51acfe14b76633baddbeaf5dc963741562392112f80c55580a95e4bdb8af1c440cf7a89b641a6981584a89a2ce695fb0978fd562d770fe0798eee0447df877cb3a889c5ebdb711b0a77cbc82fb88f90b0cec4b15e7cda5b921e2b5a60536b3bece2fb87184a07e081ed1066fe86b52a72faff21d7a310b393bb35700e5e36fe3ab86a5ed3b493ec1fe7443ef66400d3a856cdbfb9525864c826285e0367a04000801000000000000000101801dbc2f0053d34734814b2d6df491ce7807a725fe9a01ad74a07e9c51396c37eeff32010000000001010184030d26d85eaa7035084a057f2f11f701b7e2e4eda87551becbc7c97505ece173818d04000000000100080000000000000000000800000000000000000100f0655ebf7359d09e9dace10961c22e0552c201abe52f7ad4380cd93dc01e988beb053a1600000000208cddd9780721ebdfe3c74723dd2f85cad1370b29f5facfa5ab66dfef5c1f479a00086352075002000000000800000000000000000020634e3b61aad1c3326404cbe6d617c0f031fa28c38f29bdf6b24c4c9899593c8d0a005306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a037661611070617273655f616e645f76657269667900030100000101000102000004e20ddf36af412a4096f9014f4a565af9e812db9a05cc40254846cf6ed0ad910470797468326372656174655f61757468656e746963617465645f70726963655f696e666f735f7573696e675f616363756d756c61746f72000401030001040003000000000102000200010105000004e20ddf36af412a4096f9014f4a565af9e812db9a05cc40254846cf6ed0ad910470797468187570646174655f73696e676c655f70726963655f666565640005010300030100000001060003020000000102000004e20ddf36af412a4096f9014f4a565af9e812db9a05cc40254846cf6ed0ad9111686f745f706f7461746f5f766563746f720764657374726f79010704e20ddf36af412a4096f9014f4a565af9e812db9a05cc40254846cf6ed0ad910a70726963655f696e666f095072696365496e666f0001030300000000a5239cfdb84856fa466b7cec4da42954fc9901b2a48dd5320d670a1b210282070e6c656e64696e675f6d61726b657415726566726573685f726573657276655f70726963650107f95b06141ed4a174f239417323bde3f209b972f5930d8521ea38a52aff3a6ddf077375696c656e64094d41494e5f504f4f4c000401070001080001020001060000a5239cfdb84856fa466b7cec4da42954fc9901b2a48dd5320d670a1b210282070e6c656e64696e675f6d61726b65741077697468647261775f63746f6b656e730207f95b06141ed4a174f239417323bde3f209b972f5930d8521ea38a52aff3a6ddf077375696c656e64094d41494e5f504f4f4c0007000000000000000000000000000000000000000000000000000000000000000203737569035355490005010700010900010a00010200010b00000000000000000000000000000000000000000000000000000000000000000001066f7074696f6e046e6f6e650107f95b06141ed4a174f239417323bde3f209b972f5930d8521ea38a52aff3a6ddf0e6c656e64696e675f6d61726b657414526174654c696d697465724578656d7074696f6e0207f95b06141ed4a174f239417323bde3f209b972f5930d8521ea38a52aff3a6ddf077375696c656e64094d41494e5f504f4f4c000700000000000000000000000000000000000000000000000000000000000000020373756903535549000000a5239cfdb84856fa466b7cec4da42954fc9901b2a48dd5320d670a1b210282070e6c656e64696e675f6d61726b65742572656465656d5f63746f6b656e735f616e645f77697468647261775f6c69717569646974790207f95b06141ed4a174f239417323bde3f209b972f5930d8521ea38a52aff3a6ddf077375696c656e64094d41494e5f504f4f4c0007000000000000000000000000000000000000000000000000000000000000000203737569035355490005010700010c000102000306000000030700000001010308000000010d00634e3b61aad1c3326404cbe6d617c0f031fa28c38f29bdf6b24c4c9899593c8d015e01df7bd39f49ebc7ae9d40ec136ea6aaa798a4cabf072f1d94734b49237beaeb053a160000000020fdbb82d8a5704adfd474e0975e86ac95f17cd61458b6079f2c34964b69a85e18634e3b61aad1c3326404cbe6d617c0f031fa28c38f29bdf6b24c4c9899593c8dee0200000000000014b9a9000000000000'
  expect(toBuffer(intentMessage).length).toBeGreaterThan(2048)
  const accounts = [
    {
      path: "m/44'/784'/0'/0'/0'",
      xfp: '52744703',
      address: '504886c9ec43bff70af37f55865094cc3a799cb54479f252d30cd3717f15ecdc'
    }
  ]
  const origin = 'Suiet'
  const messageBuffer = toBuffer("3e6c5c3d23fe630c2e6dd428caa74b0d57bfdb713f2110fd095b5addbb8baf1f")
  expect(messageBuffer.length === 32).toBe(true)

  let result = keystoneSDK.sui.generateSignRequest({ requestId, intentMessage, accounts, origin })
  let cborHex = result.cbor.toString('hex')
  let expectResult = new UR(toBuffer(cborHex), 'sui-sign-hash-request')
  expect(result).toStrictEqual(expectResult)
})
