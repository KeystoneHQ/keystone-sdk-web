// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension="
// @generated from file chains/tron/protos/tron.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * AccountId, (name, address) use name, (null, address) use address, (name, null) use name,
 *
 * @generated from message protocol.AccountId
 */
export class AccountId extends Message<AccountId> {
  /**
   * @generated from field: bytes name = 1;
   */
  name = new Uint8Array(0);

  /**
   * @generated from field: bytes address = 2;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<AccountId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.AccountId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountId {
    return new AccountId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountId {
    return new AccountId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountId {
    return new AccountId().fromJsonString(jsonString, options);
  }

  static equals(a: AccountId | PlainMessage<AccountId> | undefined, b: AccountId | PlainMessage<AccountId> | undefined): boolean {
    return proto3.util.equals(AccountId, a, b);
  }
}

/**
 * @generated from message protocol.authority
 */
export class authority extends Message<authority> {
  /**
   * @generated from field: protocol.AccountId account = 1;
   */
  account?: AccountId;

  /**
   * @generated from field: bytes permission_name = 2;
   */
  permissionName = new Uint8Array(0);

  constructor(data?: PartialMessage<authority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.authority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: AccountId },
    { no: 2, name: "permission_name", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): authority {
    return new authority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): authority {
    return new authority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): authority {
    return new authority().fromJsonString(jsonString, options);
  }

  static equals(a: authority | PlainMessage<authority> | undefined, b: authority | PlainMessage<authority> | undefined): boolean {
    return proto3.util.equals(authority, a, b);
  }
}

/**
 * @generated from message protocol.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * @generated from field: protocol.Transaction.raw raw_data = 1;
   */
  rawData?: Transaction_raw;

  /**
   * only support size = 1,  repeated list here for muti-sig extension
   *
   * @generated from field: repeated bytes signature = 2;
   */
  signature: Uint8Array[] = [];

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "raw_data", kind: "message", T: Transaction_raw },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message protocol.Transaction.Contract
 */
export class Transaction_Contract extends Message<Transaction_Contract> {
  /**
   * @generated from field: protocol.Transaction.Contract.ContractType type = 1;
   */
  type = Transaction_Contract_ContractType.AccountCreateContract;

  /**
   * @generated from field: google.protobuf.Any parameter = 2;
   */
  parameter?: Any;

  /**
   * @generated from field: bytes provider = 3;
   */
  provider = new Uint8Array(0);

  /**
   * @generated from field: bytes ContractName = 4;
   */
  ContractName = new Uint8Array(0);

  /**
   * @generated from field: int32 Permission_id = 5;
   */
  PermissionId = 0;

  constructor(data?: PartialMessage<Transaction_Contract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Transaction.Contract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Transaction_Contract_ContractType) },
    { no: 2, name: "parameter", kind: "message", T: Any },
    { no: 3, name: "provider", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "ContractName", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "Permission_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction_Contract {
    return new Transaction_Contract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction_Contract {
    return new Transaction_Contract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction_Contract {
    return new Transaction_Contract().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction_Contract | PlainMessage<Transaction_Contract> | undefined, b: Transaction_Contract | PlainMessage<Transaction_Contract> | undefined): boolean {
    return proto3.util.equals(Transaction_Contract, a, b);
  }
}

/**
 * @generated from enum protocol.Transaction.Contract.ContractType
 */
export enum Transaction_Contract_ContractType {
  /**
   * @generated from enum value: AccountCreateContract = 0;
   */
  AccountCreateContract = 0,

  /**
   * @generated from enum value: TransferContract = 1;
   */
  TransferContract = 1,

  /**
   * @generated from enum value: TransferAssetContract = 2;
   */
  TransferAssetContract = 2,

  /**
   * @generated from enum value: TriggerSmartContract = 31;
   */
  TriggerSmartContract = 31,
}
// Retrieve enum metadata with: proto3.getEnumType(Transaction_Contract_ContractType)
proto3.util.setEnumType(Transaction_Contract_ContractType, "protocol.Transaction.Contract.ContractType", [
  { no: 0, name: "AccountCreateContract" },
  { no: 1, name: "TransferContract" },
  { no: 2, name: "TransferAssetContract" },
  { no: 31, name: "TriggerSmartContract" },
]);

/**
 * @generated from message protocol.Transaction.raw
 */
export class Transaction_raw extends Message<Transaction_raw> {
  /**
   * @generated from field: bytes ref_block_bytes = 1;
   */
  refBlockBytes = new Uint8Array(0);

  /**
   * @generated from field: int64 ref_block_num = 3;
   */
  refBlockNum = protoInt64.zero;

  /**
   * @generated from field: bytes ref_block_hash = 4;
   */
  refBlockHash = new Uint8Array(0);

  /**
   * @generated from field: int64 expiration = 8;
   */
  expiration = protoInt64.zero;

  /**
   * @generated from field: repeated protocol.authority auths = 9;
   */
  auths: authority[] = [];

  /**
   * data not used
   *
   * @generated from field: bytes data = 10;
   */
  data = new Uint8Array(0);

  /**
   * only support size = 1,  repeated list here for extension
   *
   * @generated from field: repeated protocol.Transaction.Contract contract = 11;
   */
  contract: Transaction_Contract[] = [];

  /**
   * scripts not used
   *
   * @generated from field: bytes scripts = 12;
   */
  scripts = new Uint8Array(0);

  /**
   * @generated from field: int64 timestamp = 14;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: int64 fee_limit = 18;
   */
  feeLimit = protoInt64.zero;

  constructor(data?: PartialMessage<Transaction_raw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Transaction.raw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ref_block_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "ref_block_num", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "ref_block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "expiration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "auths", kind: "message", T: authority, repeated: true },
    { no: 10, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "contract", kind: "message", T: Transaction_Contract, repeated: true },
    { no: 12, name: "scripts", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 14, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "fee_limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction_raw {
    return new Transaction_raw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction_raw {
    return new Transaction_raw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction_raw {
    return new Transaction_raw().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction_raw | PlainMessage<Transaction_raw> | undefined, b: Transaction_raw | PlainMessage<Transaction_raw> | undefined): boolean {
    return proto3.util.equals(Transaction_raw, a, b);
  }
}

