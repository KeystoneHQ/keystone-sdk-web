// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension="
// @generated from file protos/btc_transaction.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message protoc.BtcTx
 */
export class BtcTx extends Message<BtcTx> {
  /**
   * fee = outputs.size > 1 ? fee = sum(input.value) - sum(output.value) : fee
   *
   * @generated from field: int64 fee = 1;
   */
  fee = protoInt64.zero;

  /**
   * @generated from field: int32 dustThreshold = 2;
   */
  dustThreshold = 0;

  /**
   * @generated from field: string memo = 3;
   */
  memo = "";

  /**
   * @generated from field: repeated protoc.Input inputs = 4;
   */
  inputs: Input[] = [];

  /**
   * for normal btc transaction
   *
   * @generated from field: repeated protoc.Output outputs = 5;
   */
  outputs: Output[] = [];

  /**
   * for omni
   *
   * @generated from field: protoc.Omni omni = 6;
   */
  omni?: Omni;

  constructor(data?: PartialMessage<BtcTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.BtcTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "dustThreshold", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "inputs", kind: "message", T: Input, repeated: true },
    { no: 5, name: "outputs", kind: "message", T: Output, repeated: true },
    { no: 6, name: "omni", kind: "message", T: Omni },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BtcTx {
    return new BtcTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BtcTx {
    return new BtcTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BtcTx {
    return new BtcTx().fromJsonString(jsonString, options);
  }

  static equals(a: BtcTx | PlainMessage<BtcTx> | undefined, b: BtcTx | PlainMessage<BtcTx> | undefined): boolean {
    return proto3.util.equals(BtcTx, a, b);
  }
}

/**
 * @generated from message protoc.Omni
 */
export class Omni extends Message<Omni> {
  /**
   * @generated from field: string to = 5;
   */
  to = "";

  /**
   * @generated from field: string changeAddress = 6;
   */
  changeAddress = "";

  /**
   * sat unit
   *
   * @generated from field: int64 omniAmount = 7;
   */
  omniAmount = protoInt64.zero;

  /**
   * optional default 31 for usdt
   *
   * @generated from field: int32 propertyId = 8;
   */
  propertyId = 0;

  constructor(data?: PartialMessage<Omni>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Omni";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "changeAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "omniAmount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "propertyId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Omni {
    return new Omni().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Omni {
    return new Omni().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Omni {
    return new Omni().fromJsonString(jsonString, options);
  }

  static equals(a: Omni | PlainMessage<Omni> | undefined, b: Omni | PlainMessage<Omni> | undefined): boolean {
    return proto3.util.equals(Omni, a, b);
  }
}

/**
 * @generated from message protoc.Input
 */
export class Input extends Message<Input> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: int32 index = 2;
   */
  index = 0;

  /**
   * @generated from field: protoc.utxo utxo = 3;
   */
  utxo?: utxo;

  /**
   * @generated from field: string ownerKeyPath = 4;
   */
  ownerKeyPath = "";

  constructor(data?: PartialMessage<Input>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Input";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "utxo", kind: "message", T: utxo },
    { no: 4, name: "ownerKeyPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Input {
    return new Input().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Input {
    return new Input().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Input {
    return new Input().fromJsonString(jsonString, options);
  }

  static equals(a: Input | PlainMessage<Input> | undefined, b: Input | PlainMessage<Input> | undefined): boolean {
    return proto3.util.equals(Input, a, b);
  }
}

/**
 * @generated from message protoc.utxo
 */
export class utxo extends Message<utxo> {
  /**
   * @generated from field: string publicKey = 1;
   */
  publicKey = "";

  /**
   * @generated from field: string script = 2;
   */
  script = "";

  /**
   * @generated from field: int64 value = 3;
   */
  value = protoInt64.zero;

  constructor(data?: PartialMessage<utxo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.utxo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "publicKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "script", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): utxo {
    return new utxo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): utxo {
    return new utxo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): utxo {
    return new utxo().fromJsonString(jsonString, options);
  }

  static equals(a: utxo | PlainMessage<utxo> | undefined, b: utxo | PlainMessage<utxo> | undefined): boolean {
    return proto3.util.equals(utxo, a, b);
  }
}

/**
 * @generated from message protoc.Output
 */
export class Output extends Message<Output> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: int64 value = 2;
   */
  value = protoInt64.zero;

  /**
   * @generated from field: bool isChange = 3;
   */
  isChange = false;

  /**
   * @generated from field: string changeAddressPath = 4;
   */
  changeAddressPath = "";

  constructor(data?: PartialMessage<Output>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.Output";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "isChange", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "changeAddressPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output {
    return new Output().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJsonString(jsonString, options);
  }

  static equals(a: Output | PlainMessage<Output> | undefined, b: Output | PlainMessage<Output> | undefined): boolean {
    return proto3.util.equals(Output, a, b);
  }
}

