// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension="
// @generated from file protos/sign_transaction_result.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message protoc.SignTransactionResult
 */
export class SignTransactionResult extends Message<SignTransactionResult> {
  /**
   * @generated from field: string signId = 1;
   */
  signId = "";

  /**
   * @generated from field: string txId = 2;
   */
  txId = "";

  /**
   * @generated from field: string rawTx = 3;
   */
  rawTx = "";

  constructor(data?: PartialMessage<SignTransactionResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.SignTransactionResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "txId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rawTx", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTransactionResult {
    return new SignTransactionResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTransactionResult {
    return new SignTransactionResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTransactionResult {
    return new SignTransactionResult().fromJsonString(jsonString, options);
  }

  static equals(a: SignTransactionResult | PlainMessage<SignTransactionResult> | undefined, b: SignTransactionResult | PlainMessage<SignTransactionResult> | undefined): boolean {
    return proto3.util.equals(SignTransactionResult, a, b);
  }
}

