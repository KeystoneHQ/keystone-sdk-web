// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension="
// @generated from file protos/transaction.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TronTx } from "../chains/keystone/protos/tron_transaction_pb";
import { BchTx } from "../chains/keystone/protos/bch_transaction_pb";
import { DashTx } from "../chains/keystone/protos/dash_transaction_pb";
import { LtcTx } from "../chains/keystone/protos/ltc_transaction_pb";
import { DogeTx } from "../chains/keystone/protos/doge_transaction_pb";

/**
 * @generated from message protoc.SignTransaction
 */
export class SignTransaction extends Message<SignTransaction> {
  /**
   * @generated from field: string coinCode = 1;
   */
  coinCode = "";

  /**
   * @generated from field: string signId = 2;
   */
  signId = "";

  /**
   * @generated from field: string hdPath = 3;
   */
  hdPath = "";

  /**
   * @generated from field: int64 timestamp = 4;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: int32 decimal = 5;
   */
  decimal = 0;

  /**
   * @generated from oneof protoc.SignTransaction.Transaction
   */
  Transaction: {
    /**
     * BtcTx btcTx = 6;
     * EthTx ethTx = 7;
     *
     * @generated from field: protoc.TronTx tronTx = 8;
     */
    value: TronTx;
    case: "tronTx";
  } | {
    /**
     * EtcTx etcTx = 9;
     *
     * @generated from field: protoc.BchTx bchTx = 10;
     */
    value: BchTx;
    case: "bchTx";
  } | {
    /**
     * @generated from field: protoc.DashTx dashTx = 11;
     */
    value: DashTx;
    case: "dashTx";
  } | {
    /**
     * @generated from field: protoc.LtcTx ltcTx = 12;
     */
    value: LtcTx;
    case: "ltcTx";
  } | {
    /**
     * DcrTx dcrTx = 13;
     * XzcTx xzcTx = 14;
     * XrpTx xrpTx = 15;
     * IostTx iostTx = 16;
     * OmniTx omniTx = 17;
     * EosTx eosTx = 18;
     * DotTx dotTx = 19;
     * KsmTx ksmTx = 20;
     * CfxTx cfxTx = 21;
     *
     * @generated from field: protoc.DogeTx dogeTx = 22;
     */
    value: DogeTx;
    case: "dogeTx";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SignTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protoc.SignTransaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coinCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "hdPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "decimal", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "tronTx", kind: "message", T: TronTx, oneof: "Transaction" },
    { no: 10, name: "bchTx", kind: "message", T: BchTx, oneof: "Transaction" },
    { no: 11, name: "dashTx", kind: "message", T: DashTx, oneof: "Transaction" },
    { no: 12, name: "ltcTx", kind: "message", T: LtcTx, oneof: "Transaction" },
    { no: 22, name: "dogeTx", kind: "message", T: DogeTx, oneof: "Transaction" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTransaction {
    return new SignTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTransaction {
    return new SignTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTransaction {
    return new SignTransaction().fromJsonString(jsonString, options);
  }

  static equals(a: SignTransaction | PlainMessage<SignTransaction> | undefined, b: SignTransaction | PlainMessage<SignTransaction> | undefined): boolean {
    return proto3.util.equals(SignTransaction, a, b);
  }
}

